{"name":"RHAI Complete Package","tagline":"A complete tester and validator for RHAI project","body":"# RHAI Complete Package #\r\n\r\n### About this file ###\r\n\r\nThis README is written using the Markdown standard. It can be \r\ndisplayed as a plain text file, but you can open it in a browser\r\nto get an html-styled text. Everything about Markdown standard\r\nis available at http://daringfireball.net/projects/markdown/.\r\n\r\n### About RHAI ###\r\n\r\nRHAI is a Java tool developed to recognize household appliances'\r\npatterns while they're running, by examinating power consumption.\r\nAny question about this project or its usage will be welcome: \r\njust mail to Simone Colucci (simone.colucci01@universitadipavia.it).\r\n\r\n### Archive organization ###\r\n\r\nThe complete package structure is represented below:\r\n\r\n* README.md\r\n\r\n* redd_dataset\r\n\r\n* rhai_dataset\r\n\r\n    * training\r\n    * validation\r\n    * fake\r\n    * training_creation.xml\r\n    * validation_creation.xml\r\n    * fake_creation.xml\r\n    \r\n* rhai_data\r\n    * settings\r\n        * identification.properties\r\n        * abstraction.properties\r\n\r\n##### redd_dataset #####\r\n\r\nRHAI works on appliances' data files, either for training and\r\nexecution. Though you're free to use any particular dataset, \r\nwe used the Reference Energy Disaggregation Dataset (REDD) to \r\ntest the identifier. To use REDD as a source of data, download\r\nthe latest low_freq dataset at http://redd.csail.mit.edu/, and \r\nsave it in this folder. To do this, you may require a login\r\naccess. Follow the instructions available within the website.\r\n\r\n##### rhai_dataset #####\r\n\r\nRHAI works on appliances data files. Theese files must be inside\r\none of theese three folders, depending of their purpose:\r\n\r\n* training: to teach the algorithm what shape appliances have\r\n\t                        \r\n* validation: to analyze overall identification performance\r\n\t                        \r\n* fake: to teach the algorithm not to recognize anything while \r\nreading meaningless data files\r\n\t\t\t\t\r\nIn addition to theese directories, rhai_dataset contains other four \r\nfiles, whose meaning are shown in the proper section:\r\n\r\n* training_creator.xml\r\n\t\r\n* validation_creator.xml\r\n\t\r\n* fake_creator.xml\r\n\t\r\n* redd.xsd\r\n\r\nThis package has no example dataset inside. Follow the intructions below\r\n(Dataset creation using REDD and Dataset creation from other sources)\r\nto define and build your data.\r\n\r\n##### rhai_data #####\r\n\r\nThis folder contains every data file that let RHAI run. You generally \r\nneed not change the content of this folder, with two exceptions, \r\ndescribed in the dedicated section.\r\n\r\n### Dataset creation using REDD ###\r\n\r\nA RHAI data file must start when the appliance starts and end when \r\nit ends. So, if you want to use the REDD as a source of data, as we \r\ndid, you need to convert the informations from REDD standard to RHAI. \r\nTo accomplish this, you use the bin/dataset_creator.jar routine, like:\r\n\r\n\tjava -jar bin/dataset_creator.jar $xml-file $target-directory\r\n\t\r\nwhere\r\n\r\n* $xml-file is one of the .xml files of rhai_dataset, and is used to \r\ntell the process how to create the dataset\r\n\r\n* $target-directory is one of the folders of rhai_dataset\r\n\t\r\nThrough the .xml files you can define the building process of your dataset.\r\nYou need to determine which REDD files are to be used, and how to extract \r\nsingle appliances instance from that file (starting and ending time). The\r\nschema of such .xml is saved in ./rhai_dataset/redd.xsd and it's:\r\n\r\n\t<redd:appliance name=\"appliance_name\">\r\n\t\t<redd: appliance-file path=\"redd_file_path\">\r\n\t\t\t<redd:appliance-instance name=\"optional\">\r\n\t\t\t\t<redd:start> $start </redd:start>\r\n\t\t\t\t<redd:end> $end </redd:end>\r\n\t\t\t</redd:appliance-instance>\r\n\t\t</redd: appliance-file\r\n\t</redd:appliance>\t\r\n\t\t\r\nYou may have many instances for each file, many files for each appliance,\r\nand many appliances as you want in your .xml file. For each instance, you \r\nmust insert two variables, taken from the REDD file:\r\n\r\n* $start: the timestamp when the appliance starts\r\n\t                        \t\r\n* $end: the timestamp when the appliance ends\r\n\t            \r\nThe timestamp is represented under POSIX convention and counts the\r\nseconds since Epoch (Jenuary 1st, 1970), and can be read from REDD.\r\nEach REDD file indeed consists in lines like\r\n\r\n\t$timestamp      $power_consumption\r\n        \r\nOnce you finished the .xml file, you can build your RHAI dataset.\r\n\r\n### Dataset creation from other sources ###\r\n\r\nYou simply have to put folders in the dataset directory (let's say, \r\nfor example, ./rhai_dataset/validation), and name each folder as the\r\nappliance it represents. In the folder, put one or many .dat files. \r\nEach file must represent the power consumption of the appliance since\r\nit turns on till the very ending, and must be composed of such lines:\r\n\r\n\t$day/$month/$year $hour:$min:$sec\t$power_consumption\r\n\r\n### How to use RHAI ###\r\n\r\nTo execute RHAI engine, run \r\n\t\r\n\tjava -jar bin/rhai.jar\r\n\t\t\t\t\r\nand add required arguments. General usage has this shape:\r\n\r\n\t<option-id> <option-args> <command> <routine-id> <routine-args>\r\n\t\r\nTo know the set of available options and commands, run \r\n\r\n\tjava -jar bin/rhai.jar --help\r\n\r\nTo know the set of available routines for a certain command, run \r\n\r\n\tjava -jar bin/rhai.jar $command -help\r\n\t\t\t\r\nFor example, with command --trainer, this is the result:\r\n\r\n\t[ command --trainer with option -help started, mar 15 09 2015 18:35 ]\r\n\tWelcome to RHAI training system\r\n\tTheese are the available routines:\r\n\t----------\r\n\toption: -l , -ld , -load\r\n\tdescription: loads fingerprints from a directory\r\n\trequired args: a dataset directory\r\n\t----------\r\n\toption: -o , -optimize\r\n\tdescription: computes the best acceptance likelihood\r\n\trequired args: a real dataset , a fake dataset\r\n\t----------\r\n\toption: -h , -man , -help\r\n\tdescription: prints a simple help\r\n\trequired args: \r\n\t----------\r\n\t[ process terminated in about 0,00 seconds ]\r\n\r\n\t\r\n##### Changing abstraction time (_not recommended_) #####\r\n\r\nRHAI works by abstracting the measures read from input files in a high-level\r\nlabel, in order to smooth data and improve performances. The abstraction time\r\nparameter is the number of seconds that are to be abstracted into one single\r\nlabel. The default value is set to 20 seconds, but you can change it. Please\r\nnote that values too much smaller than default will cause problems with the\r\nsampling time of the input files (tests were run till t_abs ~ 10 * t_sampl) and\r\nwill result in a higher computation time, but values too much bigger than default\r\nwill decrease identification performance and will cause problems with small-duration\r\nappliances (like, for example, microwave). To change this parameter you simply have \r\nto edit the relative value in the properties file rhai_data/settings/abstraction.properties.\r\n\r\n##### Changing acceptance threeshold #####\r\n\r\nRHAI will always identify the appliance of the library set that better fits the\r\ngiven data file. That means it identifies even meaningless noise as an appliance.\r\nTo change this behavior, you can edit the acceptance threeshold parameter in the\r\nrhai_data/settings/identification.properties file. This value can go from 0 (inclusive)\r\nto 1 (exclusive). When 0, the engine will identify anything as an appliance. When 1, \r\nno appliance will be identified (null will then be returned). Since the perfect parameter\r\nchanges as the library dataset changes, there is no general rule to choose that value.\r\nTo determine the best one, you use the optimization routine available within RHAI.\r\nFirst, you need to load your training dataset to teach RHAI what shape your applainces have;\r\nto do this, just run:\r\n\r\n\tjava -jar bin/rhai.jar --trainer -load $training_data\r\n\t\r\nand wait for the dataset to be completely loaded. Then run: \r\n\r\n\tjava -jar bin/rhai.jar --trainer -optimize $real_data $fake_data\r\n\t\r\nwhere \r\n\r\n* $training_data is a dataset of real appliances used for learning. You should use rhai_dataset/training\r\n\r\n* $real_data is a dataset of real appliances. You should use rhai_dataset/validation. Do not use rhai_dataset/training\r\n\r\n* $fake_data is a dataset of fake appliances. You should use rhai_dataset/fake\r\n\r\nSince for decent-size datasets this computation may require a lot of time, we suggest\r\nthe use of --save option, to print the output in a persistent file. Run this:\r\n\r\n\tjava -jar bin/rhai.jar --save $output_file --trainer -optimize $real_data $fake_data\r\n\t\r\nAs the computation goes on, you should see something like this in your terminal:\r\n\r\n\t[ command --trainer with option -optimize started, mar 15 09 2015 18:38 ]\r\n      \t\t25%        50%        75%       100%\r\n\t===============================\r\n\t\r\nOnce finished, you get the value that better recognize real appliances _and_ reject fake ones.\r\nNow simply edit the .properties file by updating the value with the new one.\r\n\t\r\n### Credits ###\r\n\r\nRHAI is a project developed by Simone Colucci within the Laboratory\r\nof Robotics at the University of Pavia. Latest version of the source \r\ncan be found at the GitHub repository, at https://github.com/simone3991/rhai.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}